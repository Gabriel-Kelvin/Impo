1. Currency Coverter

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>Currency Convertor</title>
</head>
<body>
    <div class="container">
        <h1>Currency Convertor</h1>
        <div class="box">
            <div class="left-box">
                <select name="currency" class="currency">
                    
                </select>
                <input type="number" name="" id="input">
            </div>
            <div class="right-box">
                <select name="currency" class="currency"></select>
                <input type="number" name="" id="result">
            </div>
        </div>
        <div class="btn">
            <button id="btn">Convert</button>
        </div>
        
    </div>
    <script src="script.js"></script>
</body>
</html>



let select=document.querySelectorAll('.currency')
let btn = document.getElementById('btn')
let input = document.getElementById('input')

// console.log(select)
fetch('https://api.frankfurter.app/currencies')
.then(res=>res.json())
.then(res=>displayDropDown(res))

function displayDropDown(res){
let curr=Object.entries(res)
for(let i=0;i<curr.length;i++){
   let opt=`<option value="${curr[i][0]}">${curr[i][0]}</option>` 
    select[0].innerHTML +=opt
    select[1].innerHTML +=opt

}
}

btn.addEventListener('click',()=>{
    let curr1 = select[0].value
    let curr2 = select[1].value
    let inputVal = input.value
    if(curr1===curr2)
      alert("Choose different currencies")
    else
      convert(curr1,curr2,inputVal)
  });
  function convert(curr1,curr2,inputVal){
    const host = 'api.frankfurter.app';
    fetch(`https://${host}/latest?amount=${inputVal}&from=${curr1}&to=${curr2}`)
    .then(resp => resp.json())
    .then((data) => {
      document.getElementById('result').value = Object.values(data.rates)[0]
    });
  
  }



2. random jokes

<!DOCTYPE html>
<html>
<head>
    <title>Random Jokes</title>
    <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
    <h1>Random Jokes</h1>
    <div id="jokeContainer">
        <p id="jokeText"></p>
    </div>
    <button id="fetchButton">Get Joke</button>

    <script src="script.js"></script>
</body>
</html>



document.addEventListener('DOMContentLoaded', function() {
    const jokeText = document.getElementById('jokeText');
    const fetchButton = document.getElementById('fetchButton');

    function fetchRandomJoke() {
        fetch('https://v2.jokeapi.dev/joke/Any')
            .then(response => response.json())
            .then(data => {
                let joke;
                if (data.type === 'single') {
                    joke = data.joke;
                } else if (data.type === 'twopart') {
                    joke = `${data.setup}<br>${data.delivery}`;
                } else {
                    joke = 'No joke available.';
                }
                jokeText.innerHTML = joke;
            })
            .catch(error => {
                console.error('Error fetching joke:', error);
                jokeText.innerHTML = 'Error fetching joke.';
            });
    }

    fetchButton.addEventListener('click', fetchRandomJoke);
    fetchRandomJoke();
});




3.dog image

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Random Dog Image Generator</title>
</head>
<body style="background-color:blueviolet;">
    <center>
    <h1>Random Dog Image Generator</h1>
    
    <button style="padding: 10px; border-radius: 4px; border: none; box-shadow: 5px 5px 5px;" id="fetchDogBtn">Fetch Dog Image</button><br>
    <div>
        <img style="margin-top:10px;" id="dogImage" src="" alt="Random Dog">
    </div>
    <script src="script.js"></script>
    </center>
</body>
</html>



const fetchDogBtn = document.getElementById("fetchDogBtn");
const dogImage = document.getElementById("dogImage");

async function fetchRandomDogImage() {
    try {
        const response = await fetch("https://dog.ceo/api/breeds/image/random");
        if (!response.ok) {
            throw new Error("Failed to fetch dog image");
        }
        const imageData = await response.json();
        dogImage.src = imageData.message;
    } catch (error) {
        console.error(error);
        dogImage.src = "error.png";
    }
}
fetchDogBtn.addEventListener("click", fetchRandomDogImage);
fetchRandomDogImage();




4.Book api


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Fetch Books</title>
  </head>
  <body>
    <h1>Fetch Books</h1>
    <button id="fetch-books">Fetch Books</button>
    <div id="bookList"></div>

    <script>
      const button = document.querySelector('#fetch-books');
      const bookList = document.querySelector('#bookList');

      button.addEventListener('click', () => {
        const xhr = new XMLHttpRequest();
        xhr.open('GET', 'books.json', true);
        xhr.onload = function () {
          if (this.status === 200) {
            const books = JSON.parse(this.responseText);
            displayBooks(books);
          }
        };
        xhr.send();
      });

      function displayBooks(books) {
        let output = '';
        books.forEach(function (book) {
          output += `
            <div>
              <h3>${book.title}</h3>
              <p>Author: ${book.author}</p>
            </div>
          `;
        });
        bookList.innerHTML = output;
      }
    </script>
  </body>
</html>




[
    {
      "title": "One Piece",
      "author": "Eiichiro Oda"
    },
    {
      "title": "Naruto",
      "author": "Masashi Kishimoto"
    },
    {
      "title": "Attack on Titan",
      "author": "Hajime Isayama"
    }
  ]
  



5. Form Validation

<!DOCTYPE html>
<html>
<head>
    <title>Form with Validation</title>
    <script>
        function validateForm() {
            var name = document.forms["myForm"]["name"].value;
            var email = document.forms["myForm"]["email"].value;
            var password = document.forms["myForm"]["password"].value;

            if (name === "" || name.length < 5) {
                alert("Name must be at least 5 characters long");
                return false;
            }

            var emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
            if (email === "" || !email.match(emailPattern)) {
                alert("Please enter a valid email address");
                return false;
            }

            var passwordPattern = /^(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*]).{8,}$/;
            if (password === "" || !password.match(passwordPattern)) {
                alert("Password must be 8 characters long and contain at least one capital letter, one number, and one special character");
                return false;
            }
        }
    </script>
</head>
<body>
    <h2>Form with Validation</h2>
    <form name="myForm" onsubmit="return validateForm()" method="post">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name"><br><br>

        <label for="email">Email:</label>
        <input type="text" id="email" name="email"><br><br>

        <label for="password">Password:</label>
        <input type="password" id="password" name="password"><br><br>

        <input type="submit" value="Submit">
    </form>
</body>
</html>

  
6.xml


<?xml version="1.0" encoding="UTF-8"?>
 <?xml-model href="product.xsd" type="application/xml" schematypens="http://www.w3.org/2001/XMLSchema"?>
 <products >
    <product>
      <id>Anime</id>
      <name>OnePiece</name>
      <price>107000</price>
      <quantity>50</quantity>
      <category>Hoodie</category>
    </product>
    <product>
      <id>Anime</id>
      <name>Naruto</name>
      <price>500000</price>
      <quantity>150</quantity>
      <category>Shirt</category>
    </product>
    <product>
      <id>Anime</id>
      <name>Haikyuu</name>
      <price>150000</price>
      <quantity>25</quantity>
      <category>T-Shirt</category>
    </product>
  </products>
  


xsd

<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <xs:simpleType name="priceType">
    <xs:restriction base="xs:decimal">
      <xs:minInclusive value="64000"/>
      <xs:maxInclusive value="500000"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="categoryType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="T-Shirt"/>
      <xs:enumeration value="Hoodie"/>
      <xs:enumeration value="Shirt"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:element name="products">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="product" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="id" type="xs:string"/>
              <xs:element name="name" type="xs:string"/>
              <xs:element name="price" type="priceType"/>
              <xs:element name="quantity" type="xs:integer"/>
              <xs:element name="category" type="categoryType"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

</xs:schema>



dtd


<?xml version="1.0" encoding="UTF-8"?>
<!ELEMENT products (product+)>
<!ELEMENT product (id, name, price, quantity, category)>
<!ATTLIST id pid ID #REQUIRED>
<!ELEMENT name (#PCDATA)>
<!ELEMENT price (#PCDATA)>
<!ELEMENT quantity (#PCDATA)>
<!ELEMENT category (#PCDATA)>
  


validate


import xmlschema
xml_file = "product.xml"
xsd_file = "product.xsd"

validator = xmlschema.XMLSchema(xsd_file)
if validator.is_valid(xml_file):
    print("XML file is valid against the XSD schema.")
else:
    print("XML file is not valid against the XSD schema.")
    print(validator.validate(xml_file))




https://codeshare.io/AdwgMx


